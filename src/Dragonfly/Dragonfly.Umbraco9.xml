<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dragonfly.Umbraco9</name>
    </assembly>
    <members>
        <member name="T:Dragonfly.UmbracoHelpers.ContentExtensions">
            <summary>
            Extension methods for Base models
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.ToContentModels``1(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent},System.Boolean)">
            <summary>
            Convert a collection of IPublishedContent to a strongly-typed Model
            </summary>
            <typeparam name="T">Model to convert to </typeparam>
            <param name="Content">IPub</param>
            <param name="FailSilently">If true, will return any which CAN be converted
            (which might be less than the total passed-in),
            false will throw an Exception if any cannot be converted</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.HasPropertyWithValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property
            </summary>
            <param name="Model">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> to inspect
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias on the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <returns>
            A value indicating whether or not the property exists on the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> and has a value
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeString(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or an empty string
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeString(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default value.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeDateTime(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets a safe date time from content
            </summary>
            <param name="Content">
            The content.
            </param>
            <param name="PropertyAlias">
            The property alias.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeDateTime(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.DateTime)">
            <summary>
            Gets a safe date time from content
            </summary>
            <param name="Content">
            The content.
            </param>
            <param name="PropertyAlias">
            The property alias.
            </param>
            <param name="DefaultValue">
            The default value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeGuid(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the Guid representation
            of the property or the default value
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>.
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeGuid(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.Guid)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the Guid representation
            of the property or the default value
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>.
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default Value.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeInt(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of 0
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeInt(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.Int32)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of 0
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default Value.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeBool(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of false
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeBool(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of false
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default Value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeHtmlString(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Microsoft.AspNetCore.Html.HtmlString"/> representation
            of the property or an empty <see cref="T:Microsoft.AspNetCore.Html.HtmlString"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:Microsoft.AspNetCore.Html.HtmlString"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeHtmlString(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Microsoft.AspNetCore.Html.HtmlString"/> representation
            of the property or the default <see cref="T:Microsoft.AspNetCore.Html.HtmlString"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias
            </param>
            <param name="DefaultValue">
            The default value.
            </param>
            <returns>
            The <see cref="T:Microsoft.AspNetCore.Html.HtmlString"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafePropertyValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,``0)">
            <summary>
            Checks if a property exists and has a value, returns the default for the type if not 
            </summary>
            <param name="Content">Node to get the property value from</param>
            <param name="PropertyAlias">Alias of the property</param>
            <param name="DefaultIfNone">Value to return if missing from Node (default is the Type default - ex: 0, false, "", null, etc.)</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeContent(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets a content Id from a content picker and renders it as <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>.
            </summary>
            <param name="Content">
            The current <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/>.
            </param>
            <param name="PropertyAlias">
            The property alias.
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Cms.Web.Common.UmbracoHelper"/>.
            </param>
            <returns>
            The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> from the content picker.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.ToLink(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Returns a Link object for the current IPublishedContent
            </summary>
            <param name="CurrentPage"></param>
            <returns></returns>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.Development">
            <summary>
            Helpers related to Templates, Node Paths, Udis, and Getting Site Pages.
            Also includes functions for manipulating HTML strings.
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetTemplateAlias(System.Nullable{System.Int32},Umbraco.Cms.Core.Services.IFileService)">
            <summary>
            Get the Alias of a template from its ID. If the Id is null or zero, "NONE" will be returned.
            </summary>
            <param name="TemplateId">Integer Id of the Template </param>
            <param name="UmbFileService"> Umbraco File Service</param>
            <returns> Alias of the template, or "NONE" if missing </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetSitePage(Umbraco.Cms.Web.Common.UmbracoHelper,System.Int32,System.String)">
            <summary>
            Return the first descendant page in the site by its DocType
            </summary>
            <param name="UmbHelper">UmbracoHelper</param>
            <param name="SiteRootNodeId">ex: model.Site.Id</param>
            <param name="DoctypeAlias">Name of the Doctype to serach for</param>
            <returns>An IPublishedContent of the node, or NULL if not found. You can then cast to a strongly-typed model for the DocType (ex: new ContactUsPage(contactPage))</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetSitePages(Umbraco.Cms.Web.Common.UmbracoHelper,System.Int32,System.String)">
            <summary>
            Returns all descendant pages in the site of a specified DocType
            </summary>
            <param name="UmbHelper">UmbracoHelper</param>
            <param name="SiteRootNodeId">ex: model.Site.Id</param>
            <param name="DoctypeAlias">Name of the Doctype to serach for</param>
            <returns>An IEnumerable&lt;IPublishedContent&gt; of the nodes, or empty list if not found.</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetSitePage(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Return the first descendant page in the site by its DocType
            </summary>
            <param name="SiteRootNode">ex: model.Site.Id</param>
            <param name="DoctypeAlias">Name of the Doctype to serach for</param>
            <returns>An IPublishedContent of the node, or NULL if not found. You can then cast to a strongly-typed model for the DocType (ex: new ContactUsPage(contactPage))</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetSitePages(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Returns all descendant pages in the site of a specified DocType
            </summary>
            <param name="SiteRootNode">ex: model.Site</param>
            <param name="DoctypeAlias">Name of the Doctype to serach for</param>
            <returns>An IEnumerable&lt;IPublishedContent&gt; of the nodes, or empty list if not found.</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.NodePath(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.IMediaService,System.String@,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="UmbContentNode">Node to Get a Path for</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.NodePath(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Services.IContentService,System.String@,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="UmbContentNode">Node to Get a Path for</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.ContentNodePathFromPathIdsCsv(System.String,Umbraco.Cms.Core.Services.IContentService,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="PathIdsCsv">Comma-separated list of NodeIds representing the Path</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.MediaPath(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.IMediaService,System.String@,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="UmbMediaNode">Node to Get a Path for</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.MediaNodePathFromPathIdsCsv(System.String,Umbraco.Cms.Core.Services.IMediaService,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="PathIdsCsv">Comma-separated list of NodeIds representing the Path</param>
            <param name="UmbMediaService"></param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.HtmlIsValid(System.String)">
            <summary>
            Validates string as html
            </summary>
            <param name="OriginalHtml"></param>
            <returns>True if valid HTML, False if Invalid</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.HtmlIsValid(System.String,System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlParseError}@)">
            <summary>
            Validates string as html, returns errors
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ValidationErrors">Variable of type IEnumerable&lt;HtmlParseError&gt;</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripScripts(System.String,System.String)">
            <summary>
            Removes all &lt;script&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripScripts(Microsoft.AspNetCore.Html.HtmlString,System.String)">
            <summary>
            Removes all &lt;script&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripIframes(System.String,System.String)">
            <summary>
            Removes all &lt;iframe&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripIframes(Microsoft.AspNetCore.Html.HtmlString,System.String)">
            <summary>
            Removes all &lt;iframe&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripParagraphTags(System.String,System.Boolean)">
            <summary>
            Removes all &lt;p&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWithBr">optional - if there are multiple paragraphs, will put a &lt;br/&gt; tag between them</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripParagraphTags(Microsoft.AspNetCore.Html.HtmlString,System.Boolean)">
            <summary>
            Removes all &lt;p&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWithBr">optional - if there are multiple paragraphs, will put a &lt;br/&gt; tag between them</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Dictionary.GetDictionaryOrPlaceholder(Umbraco.Cms.Web.Common.UmbracoHelper,System.String,System.String)">
            <summary>
            Return a dictionary value or a placeholder representing the dictionary value which needs to be added
            </summary>
            <param name="Umbraco">(Extension of UmbracoHelper)</param>
            <param name="DictionaryKey">The dictionary key to lookup</param>
            <param name="DefaultValue">A default value to return instead of the placeholder if the key is not found (optional)</param>
            <returns>Either the display text, or a placeholder surrounded by [square brackets]</returns>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.Macros">
            <summary>
            Provides Functionality useful for Macros
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Return an Object for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue"></param>
            <returns>Default null value - if provided, otherwise, NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamString(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Return a String for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue">Default null value - if provided, otherwise, an Empty String</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamHtmlString(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Return an HtmlString for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue">Default null value - if provided, otherwise, an Empty String</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamInt(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Int32)">
            <summary>
            Return an Int for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue"></param>
            <returns>Default null value - if provided, otherwise, 0</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamBool(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Return a Boolean for a Macro Parameter
            </summary>
            <remarks>Supports Numeric (1) and Text (True and true) values.</remarks>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue"></param>
            <returns>Default null value - if provided, otherwise, false</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMultiContent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Cms.Web.Common.UmbracoHelper)">
            <summary>
            Returns a collection of IPublishedContent from a MultiContentPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IEnumerable&lt;IPublishedContent&gt;</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamContent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Cms.Web.Common.UmbracoHelper)">
            <summary>
            Returns an IPublishedContent from a ContentPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IPublishedContent or NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMultiMedia(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Cms.Web.Common.UmbracoHelper)">
            <summary>
            Returns a collection of IPublishedContent from a MultiMediaPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IEnumerable&lt;IPublishedContent&gt;</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMedia(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Cms.Web.Common.UmbracoHelper)">
            <summary>
            Returns an IPublishedContent from a MediaPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IPublishedContent or NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMediaContent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Cms.Web.Common.UmbracoHelper)">
            <summary>
            Returns an IPublishedContent from a MediaPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IPublishedContent or NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Mvc.IsRenderingInBackOffice(System.Uri)">
            <summary>
            Indicates whether the current request is coming from the Umbraco back-office. 
            Most useful in Macros to avoid 'no current PublishedContentRequest.' error.
            </summary>
            <param name="ThisRequestUrl">Pass in "Request.Url" or "this.Request.Url"</param>
            <returns>TRUE if it is a back-office request, FALSE if not</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Mvc.RedirectToNewWindow(Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            NOTE: This needs to be rendered (via @Html.Raw(...), etc.) since it relies upon script tags
            </summary>
            <param name="Response"></param>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Relations.GetDistinctRelatedNodeIds(System.Int32,Umbraco.Cms.Core.Services.IRelationService,System.String)">
            <summary>
            Get a list of related node Ids with duplicates removed (esp. for a bi-directional relation)
            </summary>
            <param name="LookupNodeId">Id of node to get relations for</param>
            <param name="RelationAlias">If blank will check all relations</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.UdiHelpers.ToUdiCsv(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent},System.String)">
            <summary>
            Converts a list of published content to a comma-separated string of UDI values suitable for using with the content service
            </summary>
            <param name="PubsEnum">A collection of IPublishedContent</param>
            <param name="UdiType">UDI Type to use (document, media, etc) (use 'Umbraco.Core.Constants.UdiEntityType.' to specify)
            If excluded, will try to use the DocTypeAlias to determine the UDI Type</param>
            <returns>A CSV string of UID values eg. umb://document/56c0f0ef0ac74b58ae1cce16db1476af,umb://document/5cbac9249ffa4f5ab4f5e0db1599a75b</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.UdiHelpers.ToUdi(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Converts an IPublishedContent to a UDI string suitable for using with the content service
            </summary>
            <param name="PublishedContent">Node to use</param>
            <param name="UdiType">UDI Type to use (document, media, etc) (use 'Umbraco.Core.Constants.UdiEntityType.' to specify)
            If excluded, will try to use the PublishedItemType to determine the UDI Type</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.UdiHelpers.GetUdiType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Returns a string representation of the type for the Udi (ex: 'media' or 'document')
            </summary>
            <param name="PublishedContent">Node to get data for</param>
            <returns></returns>
        </member>
        <member name="T:Dragonfly.UmbracoModels.ILinkTier">
            <summary>
            Defines a link tier
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILinkTier.Children">
            <summary>
            Gets or sets the children of the current tier
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILinkTier.UmbracoLink">
            <summary>
            Link Information (Url, Name, etc.)
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.LinkTier">
            <summary>
            Represents a link tier
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.LinkTier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dragonfly.UmbracoModels.LinkTier"/> class.
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoServices.FileHelperService">
            <summary>
            Helpers to handle File I/O
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.DownloadAndSaveHttpFile(System.String,System.String,System.String)">
            <summary>
            Get a file from a url and save it to the filesystem.
            </summary>
            <param name="FileUrl">Http url of file to save</param>
            <param name="SaveLocationFolder">disk folder where the file should be saved (virtual to root)</param>
            <param name="SaveFileName">Desired filename for saved file</param>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.DownloadAndSaveHttpFile(System.String,System.String)">
            <summary>
            Get a file from a url and save it to the filesystem.
            </summary>
            <param name="FileUrl">Http url of file to save</param>
            <param name="SaveLocation">Disk location (incl. filename) where the file should be saved (virtual to web root)</param>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.CreateDirectoryIfMissing(System.String)">
            <summary>
            Will check for the existence of a directory on disk and create it if missing
            </summary>
            <param name="FolderPath">Path to directory</param>
            <returns>TRUE if sucessful</returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.CreateFileAndDirectory(System.String)">
            <summary>
            Creates an empty file at a location, creating directories as needed
            </summary>
            <param name="FullFilePath">Path for directories and file</param>
            <returns>Filestream for new file</returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.CreateTextFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes some text to a provided file location.
            </summary>
            <param name="FilePath">Virtual or Physical path - Inlcuding the desired filename with a text-compatible extension (ex: .txt, .xml, .json, etc.)</param>
            <param name="TextContent">Text to write to file</param>
            <param name="CreateDirectoryIfMissing">If the directories int he path don't exist, create them rather than failing</param>
            <param name="FailSilently">If TRUE won't throw an error on failure. Included for backward compatibility.</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.ListLocalFiles(System.String)">
            <summary>
            Writes text to a file
            </summary>
            <param name="FilePath">Path and filename</param>
            <param name="TextToWrite">Text content to add to file</param>
            <param name="Overwrite">If FALSE will just append as a line to existing file contents, TRUE will overwrite all file contents</param>
            <param name="PrefixWithTimestamp">Add a timestamp to the beginning of the line appended (useful for log files)</param>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.GetTextFileContents(System.String)">
            <summary>
            Reads a Text file, returning contents as a string
            </summary>
            <param name="FilePath">Full path to file</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.FileExists(System.String)">
            <summary>
            Checks whether a file exists on disk
            </summary>
            <param name="FullFilePath">Relative or Mapped Path</param>
            <returns>True if file found, false if not</returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.GetFriendlyFileSize(System.Double,System.String)">
            <summary>
            Convert bytes into a friendlier format
            </summary>
            <param name="Bytes">value of the file size in bytes</param>
            <param name="FormatString">Adjust the format string to your preferences. For example "{0:0.#}{1}" would show a single decimal place, and no space.</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.GetMappedPath(System.String)">
            <summary>
            Get a mapped path of the provided path
            </summary>
            <param name="MappedOrRelativePath">The Path to look for</param>
            <returns>The Mapped path</returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.TryGetMappedPath(System.String,System.String@)">
            <summary>
            Tries to get a mapped path of the provided path
            </summary>
            <param name="MappedOrRelativePath">The Path to look for</param>
            <param name="MappedFolderPath">The Mapped path, returned</param>
            <returns>False, if an exception occurred</returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.FileHelperService.TryGetMappedPathWithStatus(System.String,System.String@)">
            <summary>
            Tries to get a mapped path of the provided path
            </summary>
            <param name="MappedOrRelativePath">The Path to look for</param>
            <param name="MappedFolderPath">The Mapped path, returned</param>
            <returns>StatusMessage with information about the operation</returns>
        </member>
        <member name="T:Dragonfly.UmbracoServices.LinkTierBuilderService">
            <summary>
            Service for Building various LinkTiers
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoServices.LinkTierBuilderService.NavDisplayNameProperties">
            <summary>
            Property aliases to use for the Nav Display Name (in ascending order of Priority)
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoServices.LinkTierBuilderService.CurrentContent">
            <summary>
            Current page where the links are being built/rendering
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoServices.LinkTierBuilderService.ChangedLinkTierEventHandler">
            <summary>
            The changed link tier event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="arg">
            The arg.
            </param>
        </member>
        <member name="E:Dragonfly.UmbracoServices.LinkTierBuilderService.AddingTier">
            <summary>
            The adding tier.
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoServices.LinkTierBuilderService.BuildLinkTier(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Builds a <see cref="T:Dragonfly.UmbracoModels.ILinkTier"/>
            </summary>
            <param name="TierContentItem">The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> "tier" item (the parent tier)</param>
            <param name="CurrentContent">The CurrentContent <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/> in the recursion</param>
            <param name="ExcludeDocumentTypes">A collection of document type aliases to exclude</param>
            <param name="TierLevel">The starting "tier" level. Note this is the Umbraco node level</param>
            <param name="MaxLevel">The max "tier" level. Note this is the Umbraco node level</param>
            <param name="IncludeContentWithoutTemplate">True or false indicating whether or not to include content that does not have an associated template</param>
            <returns>the <see cref="T:Dragonfly.UmbracoModels.ILinkTier"/></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.LinkTierBuilderService.BuildBreadCrumb(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a breadcrumb menu  (Set the 'NavDisplayNameProperties' property on the LinkHelper before calling)
            </summary>
            <param name="LinkTextProperty">Property to retrieve Text for the link. If the property doesn't exist or is blank, it will revert to using data in the 'NavDisplayNameProperties' property</param>
            <param name="MinLevel">The "top" level at which the recursion should quit (default = 1 : site root)</param>
            <param name="MaxLevel">The "bottom" level of parent pages which will be included in the menu (default = 0 : no limit, will include the current page)</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.LinkTierBuilderService.GetNavDisplayName(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Uses the values in the 'NavDisplayNameProperties' property to select the best name for the nav display
            </summary>
            <param name="Content"></param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.LinkTierBuilderService.ContentHasTemplate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Quick fix to all for checking if a content item has a template
            </summary>
            <param name="content">The <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent"/></param>
            <returns>True or false indicating whether or not the content has an associated template selected</returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.AddingLinkTierEventArgs.#ctor(Dragonfly.UmbracoModels.ILinkTier,Dragonfly.UmbracoModels.ILinkTier)">
            <summary>
            Initializes a new instance of the <see cref="T:Dragonfly.UmbracoServices.AddingLinkTierEventArgs"/> class.
            </summary>
            <param name="root">
            The root (base link tier)
            </param>
            <param name="adding">
            The modified value - generally an addition or 
            </param>
        </member>
        <member name="P:Dragonfly.UmbracoServices.AddingLinkTierEventArgs.Root">
            <summary>
            Gets or sets the root link tier.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoServices.AddingLinkTierEventArgs.Adding">
            <summary>
            Gets or sets the adding.
            </summary>
        </member>
    </members>
</doc>
